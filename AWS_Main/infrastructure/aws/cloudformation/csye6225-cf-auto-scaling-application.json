{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "ServerSideIncludesSet": {
            "Type": "AWS::WAFRegional::ByteMatchSet",
            "Properties": {
                "Name": "Server Side Includes Set",
                "ByteMatchTuples": [{
                        "FieldToMatch": {
                            "Type": "URI"
                        },
                        "TargetString": "/includes/",
                        "TextTransformation": "URL_DECODE",
                        "PositionalConstraint": "STARTS_WITH"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "URI"
                        },
                        "TargetString": ".properties",
                        "TextTransformation": "LOWERCASE",
                        "PositionalConstraint": "ENDS_WITH"
                    }
                ]
            }
        },
        "ServerSideIncludesRule": {
            "Type": "AWS::WAFRegional::Rule",
            "Properties": {
                "Name": "ServerSideIncludesRule",
                "MetricName": "ACLServerSideIncludesRule",
                "Predicates": [{
                    "DataId": {
                        "Ref": "ServerSideIncludesSet"
                    },
                    "Negated": false,
                    "Type": "ByteMatch"
                }]
            }
        },
        "BlacklistIpSet": {
            "Type": "AWS::WAFRegional::IPSet",
            "Properties": {
                "Name": "black list ip site, add manually in console for testing"
            }
        },
        "BlacklistIpRule": {
            "Type": "AWS::WAFRegional::Rule",
            "Properties": {
                "MetricName": "ACLMyBlacklistIpRule",
                "Name": "MyBlacklistIpRule",
                "Predicates": [{
                    "Type": "IPMatch",
                    "Negated": false,
                    "DataId": {
                        "Ref": "BlacklistIpSet"
                    }
                }]
            }
        },
        "AuthTokenSet": {
            "Type": "AWS::WAFRegional::SizeConstraintSet",
            "Properties": {
                "Name": "X-CSRF",
                "SizeConstraints": [{
                    "ComparisonOperator": "GT",
                    "FieldToMatch": {
                        "Type": "HEADER",
                        "Data": "x-csrf-token"
                    },
                    "Size": "36",
                    "TextTransformation": "NONE"
                }]
            }
        },
        "AuthTokenRule": {
            "Type": "AWS::WAFRegional::Rule",
            "Properties": {
                "MetricName": "ACLAuthTokenRule",
                "Name": "AuthTokenRule",
                "Predicates": [{
                    "Type": "SizeConstraint",
                    "Negated": false,
                    "DataId": {
                        "Ref": "AuthTokenSet"
                    }
                }]
            }
        },
        "PathStringSetReferers": {
            "Type": "AWS::WAFRegional::ByteMatchSet",
            "Properties": {
                "Name": "Path String Referers Set",
                "ByteMatchTuples": [{
                        "FieldToMatch": {
                            "Type": "URI"
                        },
                        "TargetString": "../",
                        "TextTransformation": "URL_DECODE",
                        "PositionalConstraint": "CONTAINS"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "URI"
                        },
                        "TargetString": "../",
                        "TextTransformation": "HTML_ENTITY_DECODE",
                        "PositionalConstraint": "CONTAINS"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "QUERY_STRING"
                        },
                        "TargetString": "../",
                        "TextTransformation": "URL_DECODE",
                        "PositionalConstraint": "CONTAINS"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "QUERY_STRING"
                        },
                        "TargetString": "../",
                        "TextTransformation": "HTML_ENTITY_DECODE",
                        "PositionalConstraint": "CONTAINS"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "URI"
                        },
                        "TargetString": "://",
                        "TextTransformation": "URL_DECODE",
                        "PositionalConstraint": "CONTAINS"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "URI"
                        },
                        "TargetString": "://",
                        "TextTransformation": "HTML_ENTITY_DECODE",
                        "PositionalConstraint": "CONTAINS"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "QUERY_STRING"
                        },
                        "TargetString": "://",
                        "TextTransformation": "URL_DECODE",
                        "PositionalConstraint": "CONTAINS"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "QUERY_STRING"
                        },
                        "TargetString": "://",
                        "TextTransformation": "HTML_ENTITY_DECODE",
                        "PositionalConstraint": "CONTAINS"
                    }
                ]
            }
        },
        "PathStringSetReferersRule": {
            "Type": "AWS::WAFRegional::Rule",
            "Properties": {
                "Name": "PathStringSetReferersRule",
                "MetricName": "ACLPathStringSetReferersRule",
                "Predicates": [{
                    "DataId": {
                        "Ref": "PathStringSetReferers"
                    },
                    "Negated": false,
                    "Type": "ByteMatch"
                }]
            }
        },
        "SizeConstraint": {
            "Type": "AWS::WAFRegional::SizeConstraintSet",
            "Properties": {
                "Name": "SizeConstraints",
                "SizeConstraints": [{
                        "ComparisonOperator": "GT",
                        "FieldToMatch": {
                            "Type": "URI"
                        },
                        "Size": "512",
                        "TextTransformation": "NONE"
                    },
                    {
                        "ComparisonOperator": "GE",
                        "FieldToMatch": {
                            "Type": "BODY"
                        },
                        "Size": "204800",
                        "TextTransformation": "NONE"
                    },
                    {
                        "ComparisonOperator": "GE",
                        "FieldToMatch": {
                            "Type": "QUERY_STRING"
                        },
                        "Size": "1024",
                        "TextTransformation": "NONE"
                    }
                ]
            }
        },
        "SizeConstraintRule": {
            "Type": "AWS::WAFRegional::Rule",
            "Properties": {
                "Name": "SizeConstraintRule",
                "MetricName": "ACLSizeConstraintRule",
                "Predicates": [{
                    "DataId": {
                        "Ref": "SizeConstraint"
                    },
                    "Negated": false,
                    "Type": "SizeConstraint"
                }]
            }
        },
        "XssMatchSet": {
            "Type": "AWS::WAFRegional::XssMatchSet",
            "Properties": {
                "Name": "XssMatchSet",
                "XssMatchTuples": [{
                        "FieldToMatch": {
                            "Type": "URI"
                        },
                        "TextTransformation": "URL_DECODE"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "URI"
                        },
                        "TextTransformation": "HTML_ENTITY_DECODE"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "QUERY_STRING"
                        },
                        "TextTransformation": "URL_DECODE"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "QUERY_STRING"
                        },
                        "TextTransformation": "HTML_ENTITY_DECODE"
                    }
                ]
            }
        },
        "XssRule": {
            "Type": "AWS::WAFRegional::Rule",
            "Properties": {
                "Name": "XssRule",
                "MetricName": "ACLXssRule",
                "Predicates": [{
                    "DataId": {
                        "Ref": "XssMatchSet"
                    },
                    "Negated": false,
                    "Type": "XssMatch"
                }]
            }
        },
        "SqlInjectionDetection": {
            "Type": "AWS::WAFRegional::SqlInjectionMatchSet",
            "Properties": {
                "Name": "SQL Injection Detection",
                "SqlInjectionMatchTuples": [{
                        "FieldToMatch": {
                            "Type": "QUERY_STRING"
                        },
                        "TextTransformation": "URL_DECODE"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "QUERY_STRING"
                        },
                        "TextTransformation": "HTML_ENTITY_DECODE"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "BODY"
                        },
                        "TextTransformation": "URL_DECODE"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "BODY"
                        },
                        "TextTransformation": "HTML_ENTITY_DECODE"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "URI"
                        },
                        "TextTransformation": "URL_DECODE"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "URI"
                        },
                        "TextTransformation": "HTML_ENTITY_DECODE"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "HEADER",
                            "Data": "Cookie"
                        },
                        "TextTransformation": "URL_DECODE"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "HEADER",
                            "Data": "Cookie"
                        },
                        "TextTransformation": "HTML_ENTITY_DECODE"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "HEADER",
                            "Data": "Authorization"
                        },
                        "TextTransformation": "URL_DECODE"
                    },
                    {
                        "FieldToMatch": {
                            "Type": "HEADER",
                            "Data": "Authorization"
                        },
                        "TextTransformation": "HTML_ENTITY_DECODE"
                    }
                ]
            }
        },
        "SqlInjectionRule": {
            "Type": "AWS::WAFRegional::Rule",
            "Properties": {
                "Name": "SQL Injection Rule",
                "MetricName": "ACLSqlInjectionRule",
                "Predicates": [{
                    "DataId": {
                        "Ref": "SqlInjectionDetection"
                    },
                    "Negated": false,
                    "Type": "SqlInjectionMatch"
                }]
            }
        },
        "WebACL": {
            "Type": "AWS::WAFRegional::WebACL",
            "Properties": {
                "DefaultAction": {
                    "Type": "ALLOW"
                },
                "MetricName": "WebACLMetric",
                "Name": "WebACL",
                "Rules": [{
                        "Action": {
                            "Type": "BLOCK"
                        },
                        "Priority": 1,
                        "RuleId": {
                            "Ref": "XssRule"
                        }
                    },
                    {
                        "Action": {
                            "Type": "BLOCK"
                        },
                        "Priority": 2,
                        "RuleId": {
                            "Ref": "SqlInjectionRule"
                        }
                    },
                    {
                        "Action": {
                            "Type": "BLOCK"
                        },
                        "Priority": 3,
                        "RuleId": {
                            "Ref": "SizeConstraintRule"
                        }
                    },
                    {
                        "Action": {
                            "Type": "BLOCK"
                        },
                        "Priority": 4,
                        "RuleId": {
                            "Ref": "PathStringSetReferersRule"
                        }
                    },
                    {
                        "Action": {
                            "Type": "BLOCK"
                        },
                        "Priority": 5,
                        "RuleId": {
                            "Ref": "AuthTokenRule"
                        }
                    },
                    {
                        "Action": {
                            "Type": "BLOCK"
                        },
                        "Priority": 6,
                        "RuleId": {
                            "Ref": "BlacklistIpRule"
                        }
                    },
                    {
                        "Action": {
                            "Type": "BLOCK"
                        },
                        "Priority": 7,
                        "RuleId": {
                            "Ref": "ServerSideIncludesRule"
                        }
                    }
                ]
            }
        },
        "WebACLAssociation": {
            "Type": "AWS::WAFRegional::WebACLAssociation",
            "Properties": {
                "ResourceArn": {
                    "Ref": "LoadBalancer"
                },
                "WebACLId": {
                    "Ref": "WebACL"
                }
            }
        },
        "DNSRecord": {
            "Type": "AWS::Route53::RecordSetGroup",
            "Properties": {
                "HostedZoneName": {
                    "Ref": "ODomainName"
                },
                "Comment": "DNS name setting",
                "RecordSets": [{
                    "Name": {
                        "Ref": "ODomainName"
                    },
                    "Type": "A",
                    "AliasTarget": {
                        "HostedZoneId": {
                            "Fn::GetAtt": [
                                "LoadBalancer",
                                "CanonicalHostedZoneID"
                            ]
                        },
                        "DNSName": {
                            "Fn::GetAtt": [
                                "LoadBalancer",
                                "DNSName"
                            ]
                        },
                        "EvaluateTargetHealth": "true"
                    }
                }]
            }
        },
        "DNSRecord2": {
            "Type": "AWS::Route53::RecordSetGroup",
            "Properties": {
                "HostedZoneName": {
                    "Ref": "ODomainName"
                },
                "Comment": "DNS name setting",
                "RecordSets": [{
                    "Name": {
                        "Fn::Sub": "nowaf.${ODomainName}"
                    },
                    "Type": "A",
                    "AliasTarget": {
                        "HostedZoneId": {
                            "Fn::GetAtt": [
                                "LoadBalancerNWAF",
                                "CanonicalHostedZoneID"
                            ]
                        },
                        "DNSName": {
                            "Fn::GetAtt": [
                                "LoadBalancerNWAF",
                                "DNSName"
                            ]
                        },
                        "EvaluateTargetHealth": "true"
                    }
                }]
            }
        },
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "HealthCheckGracePeriod": 300,
                "HealthCheckType": "EC2",
                "Tags": [{
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [{
                                        "Ref": "stackname"
                                    },
                                    "-csye6225-ec2instance"
                                ]
                            ]
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": {
                            "Ref": "EC2TagKey0"
                        },
                        "Value": {
                            "Ref": "EC2TagValue0"
                        },
                        "PropagateAtLaunch": true
                    }
                ],
                "VPCZoneIdentifier": [{
                        "Fn::ImportValue": {
                            "Ref": "subnet1ID"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Ref": "subnet2ID"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Ref": "subnet3ID"
                        }
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "MinSize": "3",
                "MaxSize": "10",
                "DesiredCapacity": "3",
                "Cooldown": "60",
                "TargetGroupARNs": [{
                    "Ref": "TargetGroup"
                },
                {
                    "Ref": "WTargetGroup"
                }]
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "LBSG",
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "443",
                    "ToPort": "443",
                    "CidrIp": "0.0.0.0/0"
                }],
                "Tags": [{
                    "Key": "CSYE6225LBSG",
                    "Value": "new-stack-1-ec2"
                }],
                "VpcId": {
                    "Fn::ImportValue": {
                        "Ref": "vpcID"
                    }
                }
            }
        },
        "LoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "Subnets": [{
                        "Fn::ImportValue": {
                            "Ref": "publicsubnet1ID"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Ref": "publicsubnet2ID"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Ref": "publicsubnet3ID"
                        }
                    }
                ],
                "LoadBalancerAttributes": [{
                    "Key": "idle_timeout.timeout_seconds",
                    "Value": "120"
                }],
                "SecurityGroups": [{
                    "Ref": "LoadBalancerSecurityGroup"
                }],
                "Tags": [{
                    "Key": "NAME",
                    "Value": "WAFLoadBalancer"
                }]
            }
        },
        "LoadBalancerNWAF": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "Subnets": [{
                        "Fn::ImportValue": {
                            "Ref": "publicsubnet1ID"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Ref": "publicsubnet2ID"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Ref": "publicsubnet3ID"
                        }
                    }
                ],
                "LoadBalancerAttributes": [{
                    "Key": "idle_timeout.timeout_seconds",
                    "Value": "120"
                }],
                "SecurityGroups": [{
                    "Ref": "LoadBalancerSecurityGroup"
                }],
                "Tags": [{
                    "Key": "NAME",
                    "Value": "NoWAFLoadBalancer"
                }]
            }
        },
        "Listener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "Certificates": [{
                    "CertificateArn": {
                        "Ref": "SSLArn"
                    }
                }],
                "DefaultActions": [{
                    "Type": "forward",
                    "TargetGroupArn": {
                        "Ref": "TargetGroup"
                    }
                }],
                "LoadBalancerArn": {
                    "Ref": "LoadBalancer"
                },
                "Port": "443",
                "Protocol": "HTTPS"
            }
        },
        "Listener2": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "Certificates": [{
                    "CertificateArn": {
                        "Ref": "SSLArn"
                    }
                }],
                "DefaultActions": [{
                    "Type": "forward",
                    "TargetGroupArn": {
                        "Ref": "WTargetGroup"
                    }
                }],
                "LoadBalancerArn": {
                    "Ref": "LoadBalancerNWAF"
                },
                "Port": "443",
                "Protocol": "HTTPS"
            }
        },
        "TargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 5,
                "UnhealthyThresholdCount": 2,
                "Protocol": "HTTP",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckPort": "80",
                "Matcher": {
                    "HttpCode": "200,401"
                },
                "TargetGroupAttributes": [{
                    "Key": "deregistration_delay.timeout_seconds",
                    "Value": "20"
                }],
                "Port": 80,
                "VpcId": {
                    "Fn::ImportValue": {
                        "Ref": "vpcID"
                    }
                }
            }
        },
        "WTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 5,
                "UnhealthyThresholdCount": 2,
                "Protocol": "HTTP",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckPort": "80",
                "Matcher": {
                    "HttpCode": "200,401"
                },
                "TargetGroupAttributes": [{
                    "Key": "deregistration_delay.timeout_seconds",
                    "Value": "20"
                }],
                "Port": 80,
                "VpcId": {
                    "Fn::ImportValue": {
                        "Ref": "vpcID"
                    }
                }
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress": true,
                "KeyName": "ec2",
                "ImageId": {
                    "Ref": "amiID"
                },
                "SecurityGroups": [{
                    "Ref": "WebServiceSG"
                }],
                "InstanceType": "t2.micro",
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe \n",
                                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 \n",
                                "yum -y update \n",
                                "cd /opt/tomcat/conf \n",
                                {
                                    "Fn::Sub": "echo \"amazonProperties.bucketName= ${s3Name}\" >> csye6225.properties \n"
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo spring.datasource.url = jdbc:mysql://",
                                            {
                                                "Fn::GetAtt": [
                                                    "RDSDBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            "/csye6225 >> csye6225.properties \n"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Sub": "echo \"spring.datasource.username= ${RDSUser}\" >> csye6225.properties \n"
                                },
                                {
                                    "Fn::Sub": "echo \"spring.datasource.password= ${RDSPassword}\" >> csye6225.properties \n"
                                },
                                {
                                    "Fn::Sub": "echo \"domain.name= ${DomainName}\" >> csye6225.properties \n"
                                },
                                "echo spring.datasource.tomcat.max-wait= -1 >> csye6225.properties \n",
                                "echo spring.datasource.tomcat.maxIdle= 31 >> csye6225.properties \n",
                                "echo spring.datasource.tomcat.maxActive= 31 >> csye6225.properties \n",
                                "systemctl enable tomcat \n",
                                "/sbin/iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080 \n",
                                "service iptables save \n",
                                "systemctl enable iptables.service \n",
                                "systemctl enable amazon-cloudwatch-agent.service \n",
                                "systemctl start amazon-cloudwatch-agent.service \n",
                                "service codedeploy-agent start \n",
                                "service codedeploy-agent enable \n",
                                "systemctl stop tomcat \n",
                                "systemctl start tomcat \n"
                            ]
                        ]
                    }
                }
            }
        },
        "WebServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WebServerGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "WebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WebServerGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 10% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "10",
                "AlarmActions": [{
                    "Ref": "WebServerScaleUpPolicy"
                }],
                "Dimensions": [{
                    "Name": "AutoScalingGroupName",
                    "Value": {
                        "Ref": "WebServerGroup"
                    }
                }],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 5% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "5",
                "AlarmActions": [{
                    "Ref": "WebServerScaleDownPolicy"
                }],
                "Dimensions": [{
                    "Name": "AutoScalingGroupName",
                    "Value": {
                        "Ref": "WebServerGroup"
                    }
                }],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "CirlceCICodeDeploy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {
                    "Fn::Sub": "${stackname}-CirlceCI-Code-Deploy"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "codedeploy:RegisterApplicationRevision",
                                "codedeploy:GetApplicationRevision"
                            ],
                            "Resource": {
                                "Fn::Sub": "arn:aws:codedeploy:${AWSREGION}:${AWSID}:application:${ApplicationName}"
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codedeploy:CreateDeployment",
                                "codedeploy:GetDeployment"
                            ],
                            "Resource": [
                                "*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codedeploy:GetDeploymentConfig"
                            ],
                            "Resource": [{
                                    "Fn::Sub": "arn:aws:codedeploy:${AWSREGION}:${AWSID}:deploymentconfig:CodeDeployDefault.OneAtATime"
                                },
                                {
                                    "Fn::Sub": "arn:aws:codedeploy:${AWSREGION}:${AWSID}:deploymentconfig:CodeDeployDefault.HalfAtATime"
                                },
                                {
                                    "Fn::Sub": "arn:aws:codedeploy:${AWSREGION}:${AWSID}:deploymentconfig:CodeDeployDefault.AllAtOnce"
                                }
                            ]
                        }
                    ]
                },
                "Users": [
                    "circleci"
                ]
            }
        },
        "CircleCIUploadToS3": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {
                    "Fn::Sub": "${stackname}-CircleCI-Upload-To-S3"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "s3:PutObject",
                            "s3:ListBucket"
                        ],
                        "Resource": [{
                                "Fn::Sub": "arn:aws:s3:::${DeployS3}"
                            },
                            {
                                "Fn::Sub": "arn:aws:s3:::${DeployS3}/*"
                            }
                        ]
                    }]
                },
                "Users": [
                    "circleci"
                ]
            }
        },
        "CodeDeployApplication": {
            "Type": "AWS::CodeDeploy::Application",
            "Properties": {
                "ApplicationName": {
                    "Ref": "ApplicationName"
                },
                "ComputePlatform": "Server"
            }
        },
        "DeploymentGroup": {
            "Type": "AWS::CodeDeploy::DeploymentGroup",
            "Properties": {
                "ApplicationName": {
                    "Ref": "CodeDeployApplication"
                },
                "DeploymentStyle": {
                    "DeploymentType": "IN_PLACE",
                    "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL"
                },
                "DeploymentGroupName": {
                    "Ref": "DeploymentGroupName"
                },
                "Ec2TagFilters": [{
                    "Key": {
                        "Ref": "EC2TagKey0"
                    },
                    "Value": {
                        "Ref": "EC2TagValue0"
                    },
                    "Type": "KEY_AND_VALUE"
                }],
                "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
                "AutoRollbackConfiguration": {
                    "Enabled": "true",
                    "Events": [
                        "DEPLOYMENT_FAILURE"
                    ]
                },
                "ServiceRoleArn": {
                    "Fn::GetAtt": [
                        "CodeDeployServiceRole",
                        "Arn"
                    ]
                },
                "AutoScalingGroups": [{
                    "Ref": "WebServerGroup"
                }]
            }
        },
        "CodeDeployEC2S3": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {
                    "Fn::Sub": "${stackname}-CodeDeploy-EC2-S3"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Action": [
                            "s3:Get*",
                            "s3:List*"
                        ],
                        "Effect": "Allow",
                        "Resource": [{
                                "Fn::Sub": "arn:aws:s3:::${DeployS3}"
                            },
                            {
                                "Fn::Sub": "arn:aws:s3:::${DeployS3}/*"
                            }
                        ]
                    }]
                },
                "Roles": [{
                    "Ref": "CodeDeployEC2ServiceRole"
                }]
            }
        },
        "AppEC2S3": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {
                    "Fn::Sub": "${stackname}-App-EC2-S3"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Action": [
                            "s3:*"
                        ],
                        "Effect": "Allow",
                        "Resource": [{
                                "Fn::Sub": "arn:aws:s3:::${s3Name}"
                            },
                            {
                                "Fn::Sub": "arn:aws:s3:::${s3Name}/*"
                            }
                        ]
                    }]
                },
                "Roles": [{
                    "Ref": "CodeDeployEC2ServiceRole"
                }]
            }
        },
        "CodeDeployEC2ServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "CodeDeployEC2ServiceRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy"
                ]
            }
        },
        "CodeDeployServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "CodeDeployServiceRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "codedeploy.amazonaws.com"
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
                ]
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{
                    "Ref": "CodeDeployEC2ServiceRole"
                }]
            }
        },
        "SNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": "PASSWORD_RESET",
                "TopicName": "password_reset",
                "Subscription": [{
                    "Endpoint": {
                        "Fn::GetAtt": [
                            "Lambda",
                            "Arn"
                        ]
                    },
                    "Protocol": "lambda"
                }]
            }
        },
        "SNSPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "SNSAccess",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Action": [
                            "sns:*"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    }]
                },
                "Roles": [{
                    "Ref": "CodeDeployEC2ServiceRole"
                }]
            }
        },
        "DDBInstance": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": "csye6225",
                "AttributeDefinitions": [{
                        "AttributeName": "id",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "expirettl",
                        "AttributeType": "N"
                    }
                ],
                "KeySchema": [{
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "expirettl",
                        "KeyType": "RANGE"
                    }
                ],
                "TimeToLiveSpecification": {
                    "AttributeName": "expirettl",
                    "Enabled": "true"
                },
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                }
            }
        },
        "WebServiceSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "security group for ec2",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Ref": "vpcID"
                    }
                },
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "80",
                    "ToPort": "80",
                    "SourceSecurityGroupId": {
                        "Fn::GetAtt": [
                            "LoadBalancerSecurityGroup",
                            "GroupId"
                        ]
                    }
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "stackname"
                                },
                                "-csye6225-webservicesg"
                            ]
                        ]
                    }
                }]
            }
        },
        "DBSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "security group for db",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Ref": "vpcID"
                    }
                },
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "3306",
                    "ToPort": "3306",
                    "SourceSecurityGroupId": {
                        "Fn::GetAtt": [
                            "WebServiceSG",
                            "GroupId"
                        ]
                    }
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "stackname"
                                },
                                "-csye6225-dbsg"
                            ]
                        ]
                    }
                }]
            }
        },
        "RDSSubnetgroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "subnet group for rds",
                "SubnetIds": [{
                        "Fn::ImportValue": {
                            "Ref": "subnet1ID"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Ref": "subnet2ID"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Ref": "subnet3ID"
                        }
                    }
                ]
            }
        },
        "RDSDBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "Engine": "MySQL",
                "AllocatedStorage": "100",
                "DBName": "csye6225",
                "DBInstanceClass": "db.t2.medium",
                "MultiAZ": false,
                "DBInstanceIdentifier": "csye6225-spring2019",
                "MasterUsername": {
                    "Ref": "RDSUser"
                },
                "MasterUserPassword": {
                    "Ref": "RDSPassword"
                },
                "PubliclyAccessible": "true",
                "VPCSecurityGroups": [{
                    "Ref": "DBSG"
                }],
                "DBSubnetGroupName": {
                    "Ref": "RDSSubnetgroup"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [{
                                    "Ref": "stackname"
                                },
                                "-csye6225-rdsinstance"
                            ]
                        ]
                    }
                }]
            }
        },
        "Lambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "exports.handler = function(event, context) {",
                                "  console.log('');",
                                "};"
                            ]
                        ]
                    }
                },
                "FunctionName": "LambdaReset",
                "Timeout": 15,
                "MemorySize": 512,
                "Handler": "com.csye6225.awslambda.PasswordReset::handleRequest",
                "Role": {
                    "Fn::ImportValue": "LambdaRole"
                },
                "Runtime": "nodejs8.10"
            }
        },
        "lambdaPermission": {
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "Lambda"
                },
                "Principal": "sns.amazonaws.com",
                "SourceArn": {
                    "Ref": "SNSTopic"
                }
            },
            "Type": "AWS::Lambda::Permission"
        }
    },
    "Parameters": {
        "stackname": {
            "Description": "Stack Name",
            "Type": "String",
            "Default": "stack01"
        },
        "subnet1ID": {
            "Type": "String",
            "Description": "subnet1 ID"
        },
        "subnet2ID": {
            "Type": "String",
            "Description": "subnet2 ID"
        },
        "subnet3ID": {
            "Type": "String",
            "Description": "subnet3 ID"
        },
        "vpcID": {
            "Type": "String",
            "Description": "vpc id"
        },
        "amiID": {
            "Type": "String",
            "Description": "AMI id"
        },
        "s3Name": {
            "Type": "String",
            "Description": "S3Bucket End Point URL"
        },
        "RDSUser": {
            "Type": "String",
            "Description": "RDS username"
        },
        "RDSPassword": {
            "Type": "String",
            "Description": "rds password"
        },
        "DeployS3": {
            "Description": "s3 bucket name for deployment",
            "Type": "String"
        },
        "AWSID": {
            "Description": "AWS account id",
            "Type": "String"
        },
        "EC2TagKey0": {
            "Type": "String",
            "Default": "DeployKey"
        },
        "EC2TagValue0": {
            "Type": "String",
            "Default": "csye6225webapp"
        },
        "AWSREGION": {
            "Description": "AWS Region",
            "Type": "String",
            "Default": "us-east-1"
        },
        "DeploymentGroupName": {
            "Type": "String",
            "Default": "csye6225-webapp-deployment"
        },
        "ApplicationName": {
            "Type": "String",
            "Default": "csye6225-webapp"
        },
        "DomainName": {
            "Type": "String"
        },
        "ODomainName": {
            "Type": "String"
        },
        "publicsubnet1ID": {
            "Type": "String",
            "Description": "subnet1 ID"
        },
        "publicsubnet2ID": {
            "Type": "String",
            "Description": "subnet2 ID"
        },
        "publicsubnet3ID": {
            "Type": "String",
            "Description": "subnet3 ID"
        },
        "SSLArn": {
            "Type": "String"
        }
    }
}